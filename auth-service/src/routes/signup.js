const express = require("express");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const User = require("../models/user");
const router = express.Router();
const { body, validationResult } = require("express-validator");

router.post(
  "/api/users/signup",
  [
    body("username").isEmail().withMessage("Email must be valid"),
    body("password")
      .trim()
      .isLength({ min: 4, max: 20 })
      .withMessage("Password must be between 4 and 20 characters"),
  ],
  async (req, res) => {
    const errors = validationResult(req);

    if (!errors.isEmpty()) {
      throw new Error("Invalid email or password");
    }

    const { username, password, forename, surname, modules } = req.body;

    const existingUser = await User.findOne({ username });

    //if there exists a user in the database, throw error
    if (existingUser) {
      console.log("Email in use");
      return res.send({});
    }

    // Create a new user
    const user = new User({ username, password, forename, surname, modules });
    //hash the password generated by the
    bcrypt.genSalt(10, (err, salt) => {
      bcrypt.hash(user.password, salt, (err, hash) => {
        user.password = hash;
        //creating the user's jwt signature,
        const userJwt = jwt.sign(
          {
            id: user._id,
            email: user.username,
            forename: user.forename,
            surname: user.surname,
            modules: user.modules
          },
          //key used to encrypt the jwt, need to create a safe one and store it in config file.
          "asdf"
        );
        //storing the jwt in the session, in essence, logging the registered user in immediately
        req.session = {
          jwt: userJwt,
        };
        //save the user into the database
        user.save().then((user) => {
          console.log("Creating an account");
          res.status(201).send(user);
        });
      });
    });
  }
);

module.exports = router;
